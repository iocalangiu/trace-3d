%by Dr. Rex Cheung, mainline, PA, USA, Spring 2012.
%please DO contact me if you have questions: cheung.r100@gmail.com
%or 215-287-2501.


%This program allows users to pad a desired number (called offset) of zeros in each x, y
%and z-dimensions.
%a3d can be generated by:
%1. start with a=[1 10 1 10 1 10 1]; 2. generate 2D data a2d=[a;a;a];
%3. generate a3d by using a3d(:,:,1)=a2d;a3d(:,:,2)=a2d;a3d(:,:,3)=a2d; 4.
%saved a3d.mat a3d;
%
%zero padding allows image processing to occur at the edges of the 3D image
%because many image processing filters take into account the values stored
%in a neighborhood of voxels around the voxel being evaluated.

function Zeropadded3DInput = preprocess3D_Zeropad3DImage(matrix3d, offset)


%%getting ready, get the input matrix and number of zeros to pad
input=matrix3d;
Nzeros = offset; %offset is the number of layers of zeros padded around a3d
%I call it offset because most image filter treat the zero
%padding as an offset.

%get the size of a3d in each x, y and z directions. In this case, a3d is
%known, but this allows for future generalization for 3D image smoothing
sizeX=size(input,1); %in the first dimension, there are 3 rows
sizeY=size(input,2); %there are 7 columns
sizeZ=size(input,3); %there are 3 planes
%%
%start padding both sides
%create zero matrix for zero padding of 2 zeros on each end of the a3d
zero2D1end=zeros(sizeX,Nzeros); %this creates a plane of sizeX (=3) x offset (= 3) zero matrix
%loop to stack 3 planes of 3x3 2D matrix containing all zeros
for i=1:sizeZ
    zero3D1end(:,:,i)=zero2D1end;
end
%pad both ends of the 3D matrix
zeroPadded3DBothEnds = [zero3D1end input zero3D1end];

%%now need to zero pad this zeroPaddedinXdim for 1. top and bottom and 2.
%front and back.
%%
%start padding the top and bottom of end-padded input from above
%to pad the top and bottom, call the new size in y dimension after zero
%padding on both sides (in this example = 3+7+3 = 13.
PaddedsizeY = Nzeros + sizeY + Nzeros; %since there are Nzeros of zeros padded on each end
%because of the user parament
%'offset'
zero2DTop=zeros(Nzeros,PaddedsizeY); %this creates a 2D matrix of zeros on top of the first plane of
%newly padded matrix zeroPadded3DBothEnds

%loop to stack 3 planes of 3x13 2D matrix containing all zeros
for i=1:sizeZ
    zero3Dtop(:,:,i)=zero2DTop;
end
%pad both top and bottom of the 3D matrix

PadTop = cat(1, zero3Dtop, zeroPadded3DBothEnds); %cat(1, a,b) = [a;b]
PadBottom = cat(1, PadTop, zero3Dtop);
zero3DTopBottom = PadBottom;

%%
%start padding the front and back of the partially padded 3D matrix from
%above

%calculate the new sizeX i.e. the new number of rows, now there are 3 rows
%of zeros added on top, and 3 more rows at the bottom
sizeX=size(zero3DTopBottom,1);

%start padding the front and back
%create one layer of 2D matrix of zeros
zero2Dfront=zeros(sizeX, PaddedsizeY);

%iterate through each voxel to create a 3D matrix of zeros
for i=1:Nzeros
    zero3Dfront(:,:,i)=zero2Dfront;
end

%pad the front
PadFront = cat(3, zero3Dfront, zero3DTopBottom);

%pad the back
PadBack = cat(3, PadFront, zero3Dfront);

%clean up the name by renaming the return variable
Zeropadded3DInput = PadBack;

%%
%plot the mid-plane of the input to visualize and verify the calculation
%calculate the mid-plane
%calculate the new sizeZ
%sizeZ=size(Zeropadded3DInput,3);
%midplane=round(sizeZ/2);
%display(Zeropadded3DInput(:,:,midplane));
%figure(1);plot(Zeropadded3DInput(:,:,midplane));title('smoothed zero-padded input signal');hold on;

%%
